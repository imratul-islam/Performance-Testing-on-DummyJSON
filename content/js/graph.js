/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 238.0, "minX": 0.0, "maxY": 171972.0, "series": [{"data": [[0.0, 2443.0], [0.1, 2443.0], [0.2, 2443.0], [0.3, 2443.0], [0.4, 2462.0], [0.5, 2462.0], [0.6, 2462.0], [0.7, 2564.0], [0.8, 2564.0], [0.9, 2564.0], [1.0, 3466.0], [1.1, 3466.0], [1.2, 3466.0], [1.3, 3466.0], [1.4, 3502.0], [1.5, 3502.0], [1.6, 3502.0], [1.7, 4991.0], [1.8, 4991.0], [1.9, 4991.0], [2.0, 4999.0], [2.1, 4999.0], [2.2, 4999.0], [2.3, 4999.0], [2.4, 5148.0], [2.5, 5148.0], [2.6, 5148.0], [2.7, 5313.0], [2.8, 5313.0], [2.9, 5313.0], [3.0, 5526.0], [3.1, 5526.0], [3.2, 5526.0], [3.3, 5526.0], [3.4, 5754.0], [3.5, 5754.0], [3.6, 5754.0], [3.7, 5881.0], [3.8, 5881.0], [3.9, 5881.0], [4.0, 6032.0], [4.1, 6032.0], [4.2, 6032.0], [4.3, 6032.0], [4.4, 6045.0], [4.5, 6045.0], [4.6, 6045.0], [4.7, 6436.0], [4.8, 6436.0], [4.9, 6436.0], [5.0, 6622.0], [5.1, 6622.0], [5.2, 6622.0], [5.3, 6622.0], [5.4, 6865.0], [5.5, 6865.0], [5.6, 6865.0], [5.7, 7023.0], [5.8, 7023.0], [5.9, 7023.0], [6.0, 7083.0], [6.1, 7083.0], [6.2, 7083.0], [6.3, 7083.0], [6.4, 7147.0], [6.5, 7147.0], [6.6, 7147.0], [6.7, 7232.0], [6.8, 7232.0], [6.9, 7232.0], [7.0, 7598.0], [7.1, 7598.0], [7.2, 7598.0], [7.3, 7598.0], [7.4, 7714.0], [7.5, 7714.0], [7.6, 7714.0], [7.7, 7757.0], [7.8, 7757.0], [7.9, 7757.0], [8.0, 7850.0], [8.1, 7850.0], [8.2, 7850.0], [8.3, 7850.0], [8.4, 7852.0], [8.5, 7852.0], [8.6, 7852.0], [8.7, 8004.0], [8.8, 8004.0], [8.9, 8004.0], [9.0, 8097.0], [9.1, 8097.0], [9.2, 8097.0], [9.3, 8097.0], [9.4, 8205.0], [9.5, 8205.0], [9.6, 8205.0], [9.7, 8308.0], [9.8, 8308.0], [9.9, 8308.0], [10.0, 8326.0], [10.1, 8326.0], [10.2, 8326.0], [10.3, 8326.0], [10.4, 8500.0], [10.5, 8500.0], [10.6, 8500.0], [10.7, 8501.0], [10.8, 8501.0], [10.9, 8501.0], [11.0, 8501.0], [11.1, 8526.0], [11.2, 8526.0], [11.3, 8526.0], [11.4, 8586.0], [11.5, 8586.0], [11.6, 8586.0], [11.7, 8607.0], [11.8, 8607.0], [11.9, 8607.0], [12.0, 8607.0], [12.1, 8693.0], [12.2, 8693.0], [12.3, 8693.0], [12.4, 8850.0], [12.5, 8850.0], [12.6, 8850.0], [12.7, 8854.0], [12.8, 8854.0], [12.9, 8854.0], [13.0, 8854.0], [13.1, 8909.0], [13.2, 8909.0], [13.3, 8909.0], [13.4, 9037.0], [13.5, 9037.0], [13.6, 9037.0], [13.7, 9060.0], [13.8, 9060.0], [13.9, 9060.0], [14.0, 9060.0], [14.1, 9089.0], [14.2, 9089.0], [14.3, 9089.0], [14.4, 9124.0], [14.5, 9124.0], [14.6, 9124.0], [14.7, 9137.0], [14.8, 9137.0], [14.9, 9137.0], [15.0, 9137.0], [15.1, 9184.0], [15.2, 9184.0], [15.3, 9184.0], [15.4, 9262.0], [15.5, 9262.0], [15.6, 9262.0], [15.7, 9268.0], [15.8, 9268.0], [15.9, 9268.0], [16.0, 9268.0], [16.1, 9309.0], [16.2, 9309.0], [16.3, 9309.0], [16.4, 9356.0], [16.5, 9356.0], [16.6, 9356.0], [16.7, 9386.0], [16.8, 9386.0], [16.9, 9386.0], [17.0, 9386.0], [17.1, 9406.0], [17.2, 9406.0], [17.3, 9406.0], [17.4, 9406.0], [17.5, 9406.0], [17.6, 9406.0], [17.7, 9430.0], [17.8, 9430.0], [17.9, 9430.0], [18.0, 9430.0], [18.1, 9458.0], [18.2, 9458.0], [18.3, 9458.0], [18.4, 9509.0], [18.5, 9509.0], [18.6, 9509.0], [18.7, 9694.0], [18.8, 9694.0], [18.9, 9694.0], [19.0, 9694.0], [19.1, 9701.0], [19.2, 9701.0], [19.3, 9701.0], [19.4, 9704.0], [19.5, 9704.0], [19.6, 9704.0], [19.7, 9741.0], [19.8, 9741.0], [19.9, 9741.0], [20.0, 9775.0], [20.1, 9775.0], [20.2, 9775.0], [20.3, 9775.0], [20.4, 9781.0], [20.5, 9781.0], [20.6, 9781.0], [20.7, 9786.0], [20.8, 9786.0], [20.9, 9786.0], [21.0, 9792.0], [21.1, 9792.0], [21.2, 9792.0], [21.3, 9792.0], [21.4, 9850.0], [21.5, 9850.0], [21.6, 9850.0], [21.7, 9889.0], [21.8, 9889.0], [21.9, 9889.0], [22.0, 9894.0], [22.1, 9894.0], [22.2, 9894.0], [22.3, 9894.0], [22.4, 9962.0], [22.5, 9962.0], [22.6, 9962.0], [22.7, 10018.0], [22.8, 10018.0], [22.9, 10018.0], [23.0, 10172.0], [23.1, 10172.0], [23.2, 10172.0], [23.3, 10172.0], [23.4, 10247.0], [23.5, 10247.0], [23.6, 10247.0], [23.7, 10342.0], [23.8, 10342.0], [23.9, 10342.0], [24.0, 10525.0], [24.1, 10525.0], [24.2, 10525.0], [24.3, 10525.0], [24.4, 10715.0], [24.5, 10715.0], [24.6, 10715.0], [24.7, 10720.0], [24.8, 10720.0], [24.9, 10720.0], [25.0, 10737.0], [25.1, 10737.0], [25.2, 10737.0], [25.3, 10737.0], [25.4, 11124.0], [25.5, 11124.0], [25.6, 11124.0], [25.7, 11131.0], [25.8, 11131.0], [25.9, 11131.0], [26.0, 11148.0], [26.1, 11148.0], [26.2, 11148.0], [26.3, 11148.0], [26.4, 11203.0], [26.5, 11203.0], [26.6, 11203.0], [26.7, 11240.0], [26.8, 11240.0], [26.9, 11240.0], [27.0, 11255.0], [27.1, 11255.0], [27.2, 11255.0], [27.3, 11255.0], [27.4, 11271.0], [27.5, 11271.0], [27.6, 11271.0], [27.7, 11429.0], [27.8, 11429.0], [27.9, 11429.0], [28.0, 11445.0], [28.1, 11445.0], [28.2, 11445.0], [28.3, 11445.0], [28.4, 11451.0], [28.5, 11451.0], [28.6, 11451.0], [28.7, 11516.0], [28.8, 11516.0], [28.9, 11516.0], [29.0, 11534.0], [29.1, 11534.0], [29.2, 11534.0], [29.3, 11534.0], [29.4, 11613.0], [29.5, 11613.0], [29.6, 11613.0], [29.7, 11631.0], [29.8, 11631.0], [29.9, 11631.0], [30.0, 11760.0], [30.1, 11760.0], [30.2, 11760.0], [30.3, 11760.0], [30.4, 11783.0], [30.5, 11783.0], [30.6, 11783.0], [30.7, 11799.0], [30.8, 11799.0], [30.9, 11799.0], [31.0, 11908.0], [31.1, 11908.0], [31.2, 11908.0], [31.3, 11908.0], [31.4, 12203.0], [31.5, 12203.0], [31.6, 12203.0], [31.7, 12206.0], [31.8, 12206.0], [31.9, 12206.0], [32.0, 12229.0], [32.1, 12229.0], [32.2, 12229.0], [32.3, 12229.0], [32.4, 12251.0], [32.5, 12251.0], [32.6, 12251.0], [32.7, 12358.0], [32.8, 12358.0], [32.9, 12358.0], [33.0, 12462.0], [33.1, 12462.0], [33.2, 12462.0], [33.3, 12462.0], [33.4, 12464.0], [33.5, 12464.0], [33.6, 12464.0], [33.7, 12467.0], [33.8, 12467.0], [33.9, 12467.0], [34.0, 12469.0], [34.1, 12469.0], [34.2, 12469.0], [34.3, 12469.0], [34.4, 12516.0], [34.5, 12516.0], [34.6, 12516.0], [34.7, 12535.0], [34.8, 12535.0], [34.9, 12535.0], [35.0, 12592.0], [35.1, 12592.0], [35.2, 12592.0], [35.3, 12592.0], [35.4, 12608.0], [35.5, 12608.0], [35.6, 12608.0], [35.7, 12737.0], [35.8, 12737.0], [35.9, 12737.0], [36.0, 12863.0], [36.1, 12863.0], [36.2, 12863.0], [36.3, 12863.0], [36.4, 12924.0], [36.5, 12924.0], [36.6, 12924.0], [36.7, 12952.0], [36.8, 12952.0], [36.9, 12952.0], [37.0, 13009.0], [37.1, 13009.0], [37.2, 13009.0], [37.3, 13009.0], [37.4, 13042.0], [37.5, 13042.0], [37.6, 13042.0], [37.7, 13058.0], [37.8, 13058.0], [37.9, 13058.0], [38.0, 13119.0], [38.1, 13119.0], [38.2, 13119.0], [38.3, 13119.0], [38.4, 13253.0], [38.5, 13253.0], [38.6, 13253.0], [38.7, 13369.0], [38.8, 13369.0], [38.9, 13369.0], [39.0, 13369.0], [39.1, 13511.0], [39.2, 13511.0], [39.3, 13511.0], [39.4, 13512.0], [39.5, 13512.0], [39.6, 13512.0], [39.7, 13557.0], [39.8, 13557.0], [39.9, 13557.0], [40.0, 13557.0], [40.1, 13558.0], [40.2, 13558.0], [40.3, 13558.0], [40.4, 13651.0], [40.5, 13651.0], [40.6, 13651.0], [40.7, 13660.0], [40.8, 13660.0], [40.9, 13660.0], [41.0, 13660.0], [41.1, 13976.0], [41.2, 13976.0], [41.3, 13976.0], [41.4, 14053.0], [41.5, 14053.0], [41.6, 14053.0], [41.7, 14098.0], [41.8, 14098.0], [41.9, 14098.0], [42.0, 14098.0], [42.1, 14125.0], [42.2, 14125.0], [42.3, 14125.0], [42.4, 14241.0], [42.5, 14241.0], [42.6, 14241.0], [42.7, 14241.0], [42.8, 14241.0], [42.9, 14241.0], [43.0, 14241.0], [43.1, 14246.0], [43.2, 14246.0], [43.3, 14246.0], [43.4, 14447.0], [43.5, 14447.0], [43.6, 14447.0], [43.7, 14451.0], [43.8, 14451.0], [43.9, 14451.0], [44.0, 14451.0], [44.1, 14477.0], [44.2, 14477.0], [44.3, 14477.0], [44.4, 14482.0], [44.5, 14482.0], [44.6, 14482.0], [44.7, 14513.0], [44.8, 14513.0], [44.9, 14513.0], [45.0, 14513.0], [45.1, 14597.0], [45.2, 14597.0], [45.3, 14597.0], [45.4, 14616.0], [45.5, 14616.0], [45.6, 14616.0], [45.7, 14625.0], [45.8, 14625.0], [45.9, 14625.0], [46.0, 14625.0], [46.1, 14660.0], [46.2, 14660.0], [46.3, 14660.0], [46.4, 14734.0], [46.5, 14734.0], [46.6, 14734.0], [46.7, 14752.0], [46.8, 14752.0], [46.9, 14752.0], [47.0, 14752.0], [47.1, 14834.0], [47.2, 14834.0], [47.3, 14834.0], [47.4, 14853.0], [47.5, 14853.0], [47.6, 14853.0], [47.7, 14894.0], [47.8, 14894.0], [47.9, 14894.0], [48.0, 14894.0], [48.1, 15037.0], [48.2, 15037.0], [48.3, 15037.0], [48.4, 15041.0], [48.5, 15041.0], [48.6, 15041.0], [48.7, 15074.0], [48.8, 15074.0], [48.9, 15074.0], [49.0, 15074.0], [49.1, 15108.0], [49.2, 15108.0], [49.3, 15108.0], [49.4, 15120.0], [49.5, 15120.0], [49.6, 15120.0], [49.7, 15146.0], [49.8, 15146.0], [49.9, 15146.0], [50.0, 15146.0], [50.1, 15207.0], [50.2, 15207.0], [50.3, 15207.0], [50.4, 15225.0], [50.5, 15225.0], [50.6, 15225.0], [50.7, 15239.0], [50.8, 15239.0], [50.9, 15239.0], [51.0, 15239.0], [51.1, 15269.0], [51.2, 15269.0], [51.3, 15269.0], [51.4, 15327.0], [51.5, 15327.0], [51.6, 15327.0], [51.7, 15434.0], [51.8, 15434.0], [51.9, 15434.0], [52.0, 15434.0], [52.1, 15467.0], [52.2, 15467.0], [52.3, 15467.0], [52.4, 15487.0], [52.5, 15487.0], [52.6, 15487.0], [52.7, 15493.0], [52.8, 15493.0], [52.9, 15493.0], [53.0, 15493.0], [53.1, 15539.0], [53.2, 15539.0], [53.3, 15539.0], [53.4, 15666.0], [53.5, 15666.0], [53.6, 15666.0], [53.7, 15872.0], [53.8, 15872.0], [53.9, 15872.0], [54.0, 15872.0], [54.1, 15877.0], [54.2, 15877.0], [54.3, 15877.0], [54.4, 15902.0], [54.5, 15902.0], [54.6, 15902.0], [54.7, 16095.0], [54.8, 16095.0], [54.9, 16095.0], [55.0, 16095.0], [55.1, 16120.0], [55.2, 16120.0], [55.3, 16120.0], [55.4, 16227.0], [55.5, 16227.0], [55.6, 16227.0], [55.7, 16273.0], [55.8, 16273.0], [55.9, 16273.0], [56.0, 16273.0], [56.1, 16315.0], [56.2, 16315.0], [56.3, 16315.0], [56.4, 16444.0], [56.5, 16444.0], [56.6, 16444.0], [56.7, 16693.0], [56.8, 16693.0], [56.9, 16693.0], [57.0, 16693.0], [57.1, 16718.0], [57.2, 16718.0], [57.3, 16718.0], [57.4, 16788.0], [57.5, 16788.0], [57.6, 16788.0], [57.7, 16925.0], [57.8, 16925.0], [57.9, 16925.0], [58.0, 16925.0], [58.1, 16938.0], [58.2, 16938.0], [58.3, 16938.0], [58.4, 16944.0], [58.5, 16944.0], [58.6, 16944.0], [58.7, 16994.0], [58.8, 16994.0], [58.9, 16994.0], [59.0, 16994.0], [59.1, 17003.0], [59.2, 17003.0], [59.3, 17003.0], [59.4, 17017.0], [59.5, 17017.0], [59.6, 17017.0], [59.7, 17031.0], [59.8, 17031.0], [59.9, 17031.0], [60.0, 17031.0], [60.1, 17260.0], [60.2, 17260.0], [60.3, 17260.0], [60.4, 17278.0], [60.5, 17278.0], [60.6, 17278.0], [60.7, 17309.0], [60.8, 17309.0], [60.9, 17309.0], [61.0, 17309.0], [61.1, 17387.0], [61.2, 17387.0], [61.3, 17387.0], [61.4, 17454.0], [61.5, 17454.0], [61.6, 17454.0], [61.7, 17477.0], [61.8, 17477.0], [61.9, 17477.0], [62.0, 17477.0], [62.1, 17478.0], [62.2, 17478.0], [62.3, 17478.0], [62.4, 17500.0], [62.5, 17500.0], [62.6, 17500.0], [62.7, 17536.0], [62.8, 17536.0], [62.9, 17536.0], [63.0, 17536.0], [63.1, 17610.0], [63.2, 17610.0], [63.3, 17610.0], [63.4, 17724.0], [63.5, 17724.0], [63.6, 17724.0], [63.7, 17815.0], [63.8, 17815.0], [63.9, 17815.0], [64.0, 17815.0], [64.1, 17886.0], [64.2, 17886.0], [64.3, 17886.0], [64.4, 17941.0], [64.5, 17941.0], [64.6, 17941.0], [64.7, 18152.0], [64.8, 18152.0], [64.9, 18152.0], [65.0, 18152.0], [65.1, 18218.0], [65.2, 18218.0], [65.3, 18218.0], [65.4, 18261.0], [65.5, 18261.0], [65.6, 18261.0], [65.7, 18276.0], [65.8, 18276.0], [65.9, 18276.0], [66.0, 18276.0], [66.1, 18376.0], [66.2, 18376.0], [66.3, 18376.0], [66.4, 18394.0], [66.5, 18394.0], [66.6, 18394.0], [66.7, 18429.0], [66.8, 18429.0], [66.9, 18429.0], [67.0, 18429.0], [67.1, 18442.0], [67.2, 18442.0], [67.3, 18442.0], [67.4, 18473.0], [67.5, 18473.0], [67.6, 18473.0], [67.7, 18567.0], [67.8, 18567.0], [67.9, 18567.0], [68.0, 18567.0], [68.1, 18604.0], [68.2, 18604.0], [68.3, 18604.0], [68.4, 18653.0], [68.5, 18653.0], [68.6, 18653.0], [68.7, 18714.0], [68.8, 18714.0], [68.9, 18714.0], [69.0, 18714.0], [69.1, 18770.0], [69.2, 18770.0], [69.3, 18770.0], [69.4, 18808.0], [69.5, 18808.0], [69.6, 18808.0], [69.7, 18823.0], [69.8, 18823.0], [69.9, 18823.0], [70.0, 18823.0], [70.1, 18987.0], [70.2, 18987.0], [70.3, 18987.0], [70.4, 19063.0], [70.5, 19063.0], [70.6, 19063.0], [70.7, 19214.0], [70.8, 19214.0], [70.9, 19214.0], [71.0, 19214.0], [71.1, 19518.0], [71.2, 19518.0], [71.3, 19518.0], [71.4, 19552.0], [71.5, 19552.0], [71.6, 19552.0], [71.7, 19976.0], [71.8, 19976.0], [71.9, 19976.0], [72.0, 19976.0], [72.1, 20108.0], [72.2, 20108.0], [72.3, 20108.0], [72.4, 20165.0], [72.5, 20165.0], [72.6, 20165.0], [72.7, 20316.0], [72.8, 20316.0], [72.9, 20316.0], [73.0, 20316.0], [73.1, 20563.0], [73.2, 20563.0], [73.3, 20563.0], [73.4, 20605.0], [73.5, 20605.0], [73.6, 20605.0], [73.7, 20801.0], [73.8, 20801.0], [73.9, 20801.0], [74.0, 20801.0], [74.1, 20908.0], [74.2, 20908.0], [74.3, 20908.0], [74.4, 20965.0], [74.5, 20965.0], [74.6, 20965.0], [74.7, 21138.0], [74.8, 21138.0], [74.9, 21138.0], [75.0, 21138.0], [75.1, 21255.0], [75.2, 21255.0], [75.3, 21255.0], [75.4, 21293.0], [75.5, 21293.0], [75.6, 21293.0], [75.7, 21375.0], [75.8, 21375.0], [75.9, 21375.0], [76.0, 21468.0], [76.1, 21468.0], [76.2, 21468.0], [76.3, 21468.0], [76.4, 21624.0], [76.5, 21624.0], [76.6, 21624.0], [76.7, 21744.0], [76.8, 21744.0], [76.9, 21744.0], [77.0, 21768.0], [77.1, 21768.0], [77.2, 21768.0], [77.3, 21768.0], [77.4, 21803.0], [77.5, 21803.0], [77.6, 21803.0], [77.7, 21875.0], [77.8, 21875.0], [77.9, 21875.0], [78.0, 22048.0], [78.1, 22048.0], [78.2, 22048.0], [78.3, 22048.0], [78.4, 22183.0], [78.5, 22183.0], [78.6, 22183.0], [78.7, 22343.0], [78.8, 22343.0], [78.9, 22343.0], [79.0, 22486.0], [79.1, 22486.0], [79.2, 22486.0], [79.3, 22486.0], [79.4, 22601.0], [79.5, 22601.0], [79.6, 22601.0], [79.7, 22705.0], [79.8, 22705.0], [79.9, 22705.0], [80.0, 22899.0], [80.1, 22899.0], [80.2, 22899.0], [80.3, 22899.0], [80.4, 22956.0], [80.5, 22956.0], [80.6, 22956.0], [80.7, 23093.0], [80.8, 23093.0], [80.9, 23093.0], [81.0, 23125.0], [81.1, 23125.0], [81.2, 23125.0], [81.3, 23125.0], [81.4, 23546.0], [81.5, 23546.0], [81.6, 23546.0], [81.7, 23694.0], [81.8, 23694.0], [81.9, 23694.0], [82.0, 23862.0], [82.1, 23862.0], [82.2, 23862.0], [82.3, 23862.0], [82.4, 24862.0], [82.5, 24862.0], [82.6, 24862.0], [82.7, 24897.0], [82.8, 24897.0], [82.9, 24897.0], [83.0, 26303.0], [83.1, 26303.0], [83.2, 26303.0], [83.3, 26303.0], [83.4, 26948.0], [83.5, 26948.0], [83.6, 26948.0], [83.7, 27041.0], [83.8, 27041.0], [83.9, 27041.0], [84.0, 28346.0], [84.1, 28346.0], [84.2, 28346.0], [84.3, 28346.0], [84.4, 29150.0], [84.5, 29150.0], [84.6, 29150.0], [84.7, 29579.0], [84.8, 29579.0], [84.9, 29579.0], [85.0, 31095.0], [85.1, 31095.0], [85.2, 31095.0], [85.3, 31095.0], [85.4, 33381.0], [85.5, 33381.0], [85.6, 33381.0], [85.7, 36441.0], [85.8, 36441.0], [85.9, 36441.0], [86.0, 157500.0], [86.1, 157500.0], [86.2, 157500.0], [86.3, 157500.0], [86.4, 159558.0], [86.5, 159558.0], [86.6, 159558.0], [86.7, 159560.0], [86.8, 159560.0], [86.9, 159560.0], [87.0, 159578.0], [87.1, 159578.0], [87.2, 159578.0], [87.3, 159578.0], [87.4, 159684.0], [87.5, 159684.0], [87.6, 159684.0], [87.7, 159687.0], [87.8, 159687.0], [87.9, 159687.0], [88.0, 159702.0], [88.1, 159702.0], [88.2, 159702.0], [88.3, 159702.0], [88.4, 163334.0], [88.5, 163334.0], [88.6, 163334.0], [88.7, 163373.0], [88.8, 163373.0], [88.9, 163373.0], [89.0, 163379.0], [89.1, 163379.0], [89.2, 163379.0], [89.3, 163379.0], [89.4, 163386.0], [89.5, 163386.0], [89.6, 163386.0], [89.7, 163395.0], [89.8, 163395.0], [89.9, 163395.0], [90.0, 163399.0], [90.1, 163399.0], [90.2, 163399.0], [90.3, 163399.0], [90.4, 163424.0], [90.5, 163424.0], [90.6, 163424.0], [90.7, 163476.0], [90.8, 163476.0], [90.9, 163476.0], [91.0, 163499.0], [91.1, 163499.0], [91.2, 163499.0], [91.3, 163499.0], [91.4, 163514.0], [91.5, 163514.0], [91.6, 163514.0], [91.7, 163515.0], [91.8, 163515.0], [91.9, 163515.0], [92.0, 163535.0], [92.1, 163535.0], [92.2, 163535.0], [92.3, 163535.0], [92.4, 163557.0], [92.5, 163557.0], [92.6, 163557.0], [92.7, 163581.0], [92.8, 163581.0], [92.9, 163581.0], [93.0, 163584.0], [93.1, 163584.0], [93.2, 163584.0], [93.3, 163584.0], [93.4, 163598.0], [93.5, 163598.0], [93.6, 163598.0], [93.7, 163636.0], [93.8, 163636.0], [93.9, 163636.0], [94.0, 171313.0], [94.1, 171313.0], [94.2, 171313.0], [94.3, 171313.0], [94.4, 171474.0], [94.5, 171474.0], [94.6, 171474.0], [94.7, 171476.0], [94.8, 171476.0], [94.9, 171476.0], [95.0, 171479.0], [95.1, 171479.0], [95.2, 171479.0], [95.3, 171479.0], [95.4, 171488.0], [95.5, 171488.0], [95.6, 171488.0], [95.7, 171495.0], [95.8, 171495.0], [95.9, 171495.0], [96.0, 171499.0], [96.1, 171499.0], [96.2, 171499.0], [96.3, 171499.0], [96.4, 171509.0], [96.5, 171509.0], [96.6, 171509.0], [96.7, 171514.0], [96.8, 171514.0], [96.9, 171514.0], [97.0, 171518.0], [97.1, 171518.0], [97.2, 171518.0], [97.3, 171518.0], [97.4, 171521.0], [97.5, 171521.0], [97.6, 171521.0], [97.7, 171528.0], [97.8, 171528.0], [97.9, 171528.0], [98.0, 171532.0], [98.1, 171532.0], [98.2, 171532.0], [98.3, 171532.0], [98.4, 171534.0], [98.5, 171534.0], [98.6, 171534.0], [98.7, 171546.0], [98.8, 171546.0], [98.9, 171546.0], [99.0, 171576.0], [99.1, 171576.0], [99.2, 171576.0], [99.3, 171576.0], [99.4, 171583.0], [99.5, 171583.0], [99.6, 171583.0], [99.7, 171972.0], [99.8, 171972.0], [99.9, 171972.0]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[0.0, 238.0], [0.1, 238.0], [0.2, 238.0], [0.3, 238.0], [0.4, 241.0], [0.5, 241.0], [0.6, 241.0], [0.7, 243.0], [0.8, 243.0], [0.9, 243.0], [1.0, 243.0], [1.1, 243.0], [1.2, 243.0], [1.3, 243.0], [1.4, 244.0], [1.5, 244.0], [1.6, 244.0], [1.7, 244.0], [1.8, 244.0], [1.9, 244.0], [2.0, 245.0], [2.1, 245.0], [2.2, 245.0], [2.3, 245.0], [2.4, 247.0], [2.5, 247.0], [2.6, 247.0], [2.7, 247.0], [2.8, 247.0], [2.9, 247.0], [3.0, 248.0], [3.1, 248.0], [3.2, 248.0], [3.3, 248.0], [3.4, 249.0], [3.5, 249.0], [3.6, 249.0], [3.7, 250.0], [3.8, 250.0], [3.9, 250.0], [4.0, 250.0], [4.1, 250.0], [4.2, 250.0], [4.3, 250.0], [4.4, 251.0], [4.5, 251.0], [4.6, 251.0], [4.7, 253.0], [4.8, 253.0], [4.9, 253.0], [5.0, 253.0], [5.1, 253.0], [5.2, 253.0], [5.3, 253.0], [5.4, 254.0], [5.5, 254.0], [5.6, 254.0], [5.7, 257.0], [5.8, 257.0], [5.9, 257.0], [6.0, 259.0], [6.1, 259.0], [6.2, 259.0], [6.3, 259.0], [6.4, 261.0], [6.5, 261.0], [6.6, 261.0], [6.7, 261.0], [6.8, 261.0], [6.9, 261.0], [7.0, 263.0], [7.1, 263.0], [7.2, 263.0], [7.3, 263.0], [7.4, 267.0], [7.5, 267.0], [7.6, 267.0], [7.7, 273.0], [7.8, 273.0], [7.9, 273.0], [8.0, 274.0], [8.1, 274.0], [8.2, 274.0], [8.3, 274.0], [8.4, 274.0], [8.5, 274.0], [8.6, 274.0], [8.7, 276.0], [8.8, 276.0], [8.9, 276.0], [9.0, 282.0], [9.1, 282.0], [9.2, 282.0], [9.3, 282.0], [9.4, 286.0], [9.5, 286.0], [9.6, 286.0], [9.7, 286.0], [9.8, 286.0], [9.9, 286.0], [10.0, 287.0], [10.1, 287.0], [10.2, 287.0], [10.3, 287.0], [10.4, 288.0], [10.5, 288.0], [10.6, 288.0], [10.7, 288.0], [10.8, 288.0], [10.9, 288.0], [11.0, 289.0], [11.1, 289.0], [11.2, 289.0], [11.3, 289.0], [11.4, 289.0], [11.5, 289.0], [11.6, 289.0], [11.7, 291.0], [11.8, 291.0], [11.9, 291.0], [12.0, 292.0], [12.1, 292.0], [12.2, 292.0], [12.3, 292.0], [12.4, 298.0], [12.5, 298.0], [12.6, 298.0], [12.7, 298.0], [12.8, 298.0], [12.9, 298.0], [13.0, 300.0], [13.1, 300.0], [13.2, 300.0], [13.3, 300.0], [13.4, 301.0], [13.5, 301.0], [13.6, 301.0], [13.7, 304.0], [13.8, 304.0], [13.9, 304.0], [14.0, 304.0], [14.1, 304.0], [14.2, 304.0], [14.3, 304.0], [14.4, 308.0], [14.5, 308.0], [14.6, 308.0], [14.7, 308.0], [14.8, 308.0], [14.9, 308.0], [15.0, 308.0], [15.1, 308.0], [15.2, 308.0], [15.3, 308.0], [15.4, 309.0], [15.5, 309.0], [15.6, 309.0], [15.7, 310.0], [15.8, 310.0], [15.9, 310.0], [16.0, 312.0], [16.1, 312.0], [16.2, 312.0], [16.3, 312.0], [16.4, 314.0], [16.5, 314.0], [16.6, 314.0], [16.7, 315.0], [16.8, 315.0], [16.9, 315.0], [17.0, 315.0], [17.1, 315.0], [17.2, 315.0], [17.3, 315.0], [17.4, 321.0], [17.5, 321.0], [17.6, 321.0], [17.7, 324.0], [17.8, 324.0], [17.9, 324.0], [18.0, 333.0], [18.1, 333.0], [18.2, 333.0], [18.3, 333.0], [18.4, 335.0], [18.5, 335.0], [18.6, 335.0], [18.7, 335.0], [18.8, 335.0], [18.9, 335.0], [19.0, 338.0], [19.1, 338.0], [19.2, 338.0], [19.3, 338.0], [19.4, 341.0], [19.5, 341.0], [19.6, 341.0], [19.7, 342.0], [19.8, 342.0], [19.9, 342.0], [20.0, 344.0], [20.1, 344.0], [20.2, 344.0], [20.3, 344.0], [20.4, 348.0], [20.5, 348.0], [20.6, 348.0], [20.7, 348.0], [20.8, 348.0], [20.9, 348.0], [21.0, 350.0], [21.1, 350.0], [21.2, 350.0], [21.3, 350.0], [21.4, 351.0], [21.5, 351.0], [21.6, 351.0], [21.7, 358.0], [21.8, 358.0], [21.9, 358.0], [22.0, 365.0], [22.1, 365.0], [22.2, 365.0], [22.3, 365.0], [22.4, 369.0], [22.5, 369.0], [22.6, 369.0], [22.7, 369.0], [22.8, 369.0], [22.9, 369.0], [23.0, 373.0], [23.1, 373.0], [23.2, 373.0], [23.3, 373.0], [23.4, 374.0], [23.5, 374.0], [23.6, 374.0], [23.7, 374.0], [23.8, 374.0], [23.9, 374.0], [24.0, 382.0], [24.1, 382.0], [24.2, 382.0], [24.3, 382.0], [24.4, 388.0], [24.5, 388.0], [24.6, 388.0], [24.7, 389.0], [24.8, 389.0], [24.9, 389.0], [25.0, 392.0], [25.1, 392.0], [25.2, 392.0], [25.3, 392.0], [25.4, 396.0], [25.5, 396.0], [25.6, 396.0], [25.7, 401.0], [25.8, 401.0], [25.9, 401.0], [26.0, 407.0], [26.1, 407.0], [26.2, 407.0], [26.3, 407.0], [26.4, 408.0], [26.5, 408.0], [26.6, 408.0], [26.7, 411.0], [26.8, 411.0], [26.9, 411.0], [27.0, 414.0], [27.1, 414.0], [27.2, 414.0], [27.3, 414.0], [27.4, 418.0], [27.5, 418.0], [27.6, 418.0], [27.7, 421.0], [27.8, 421.0], [27.9, 421.0], [28.0, 423.0], [28.1, 423.0], [28.2, 423.0], [28.3, 423.0], [28.4, 423.0], [28.5, 423.0], [28.6, 423.0], [28.7, 424.0], [28.8, 424.0], [28.9, 424.0], [29.0, 428.0], [29.1, 428.0], [29.2, 428.0], [29.3, 428.0], [29.4, 428.0], [29.5, 428.0], [29.6, 428.0], [29.7, 430.0], [29.8, 430.0], [29.9, 430.0], [30.0, 431.0], [30.1, 431.0], [30.2, 431.0], [30.3, 431.0], [30.4, 434.0], [30.5, 434.0], [30.6, 434.0], [30.7, 435.0], [30.8, 435.0], [30.9, 435.0], [31.0, 435.0], [31.1, 435.0], [31.2, 435.0], [31.3, 435.0], [31.4, 435.0], [31.5, 435.0], [31.6, 435.0], [31.7, 438.0], [31.8, 438.0], [31.9, 438.0], [32.0, 438.0], [32.1, 438.0], [32.2, 438.0], [32.3, 438.0], [32.4, 439.0], [32.5, 439.0], [32.6, 439.0], [32.7, 439.0], [32.8, 439.0], [32.9, 439.0], [33.0, 442.0], [33.1, 442.0], [33.2, 442.0], [33.3, 442.0], [33.4, 444.0], [33.5, 444.0], [33.6, 444.0], [33.7, 445.0], [33.8, 445.0], [33.9, 445.0], [34.0, 447.0], [34.1, 447.0], [34.2, 447.0], [34.3, 447.0], [34.4, 449.0], [34.5, 449.0], [34.6, 449.0], [34.7, 450.0], [34.8, 450.0], [34.9, 450.0], [35.0, 450.0], [35.1, 450.0], [35.2, 450.0], [35.3, 450.0], [35.4, 451.0], [35.5, 451.0], [35.6, 451.0], [35.7, 451.0], [35.8, 451.0], [35.9, 451.0], [36.0, 451.0], [36.1, 451.0], [36.2, 451.0], [36.3, 451.0], [36.4, 456.0], [36.5, 456.0], [36.6, 456.0], [36.7, 464.0], [36.8, 464.0], [36.9, 464.0], [37.0, 466.0], [37.1, 466.0], [37.2, 466.0], [37.3, 466.0], [37.4, 467.0], [37.5, 467.0], [37.6, 467.0], [37.7, 468.0], [37.8, 468.0], [37.9, 468.0], [38.0, 475.0], [38.1, 475.0], [38.2, 475.0], [38.3, 475.0], [38.4, 479.0], [38.5, 479.0], [38.6, 479.0], [38.7, 481.0], [38.8, 481.0], [38.9, 481.0], [39.0, 483.0], [39.1, 483.0], [39.2, 483.0], [39.3, 483.0], [39.4, 484.0], [39.5, 484.0], [39.6, 484.0], [39.7, 485.0], [39.8, 485.0], [39.9, 485.0], [40.0, 485.0], [40.1, 486.0], [40.2, 486.0], [40.3, 486.0], [40.4, 486.0], [40.5, 486.0], [40.6, 486.0], [40.7, 486.0], [40.8, 486.0], [40.9, 486.0], [41.0, 486.0], [41.1, 493.0], [41.2, 493.0], [41.3, 493.0], [41.4, 496.0], [41.5, 496.0], [41.6, 496.0], [41.7, 496.0], [41.8, 496.0], [41.9, 496.0], [42.0, 496.0], [42.1, 497.0], [42.2, 497.0], [42.3, 497.0], [42.4, 503.0], [42.5, 503.0], [42.6, 503.0], [42.7, 504.0], [42.8, 504.0], [42.9, 504.0], [43.0, 504.0], [43.1, 504.0], [43.2, 504.0], [43.3, 504.0], [43.4, 506.0], [43.5, 506.0], [43.6, 506.0], [43.7, 508.0], [43.8, 508.0], [43.9, 508.0], [44.0, 508.0], [44.1, 508.0], [44.2, 508.0], [44.3, 508.0], [44.4, 509.0], [44.5, 509.0], [44.6, 509.0], [44.7, 511.0], [44.8, 511.0], [44.9, 511.0], [45.0, 511.0], [45.1, 512.0], [45.2, 512.0], [45.3, 512.0], [45.4, 513.0], [45.5, 513.0], [45.6, 513.0], [45.7, 513.0], [45.8, 513.0], [45.9, 513.0], [46.0, 513.0], [46.1, 513.0], [46.2, 513.0], [46.3, 513.0], [46.4, 514.0], [46.5, 514.0], [46.6, 514.0], [46.7, 514.0], [46.8, 514.0], [46.9, 514.0], [47.0, 514.0], [47.1, 515.0], [47.2, 515.0], [47.3, 515.0], [47.4, 516.0], [47.5, 516.0], [47.6, 516.0], [47.7, 516.0], [47.8, 516.0], [47.9, 516.0], [48.0, 516.0], [48.1, 517.0], [48.2, 517.0], [48.3, 517.0], [48.4, 517.0], [48.5, 517.0], [48.6, 517.0], [48.7, 518.0], [48.8, 518.0], [48.9, 518.0], [49.0, 518.0], [49.1, 519.0], [49.2, 519.0], [49.3, 519.0], [49.4, 519.0], [49.5, 519.0], [49.6, 519.0], [49.7, 525.0], [49.8, 525.0], [49.9, 525.0], [50.0, 525.0], [50.1, 526.0], [50.2, 526.0], [50.3, 526.0], [50.4, 526.0], [50.5, 526.0], [50.6, 526.0], [50.7, 526.0], [50.8, 526.0], [50.9, 526.0], [51.0, 526.0], [51.1, 527.0], [51.2, 527.0], [51.3, 527.0], [51.4, 529.0], [51.5, 529.0], [51.6, 529.0], [51.7, 543.0], [51.8, 543.0], [51.9, 543.0], [52.0, 543.0], [52.1, 544.0], [52.2, 544.0], [52.3, 544.0], [52.4, 549.0], [52.5, 549.0], [52.6, 549.0], [52.7, 551.0], [52.8, 551.0], [52.9, 551.0], [53.0, 551.0], [53.1, 552.0], [53.2, 552.0], [53.3, 552.0], [53.4, 553.0], [53.5, 553.0], [53.6, 553.0], [53.7, 557.0], [53.8, 557.0], [53.9, 557.0], [54.0, 557.0], [54.1, 558.0], [54.2, 558.0], [54.3, 558.0], [54.4, 568.0], [54.5, 568.0], [54.6, 568.0], [54.7, 569.0], [54.8, 569.0], [54.9, 569.0], [55.0, 569.0], [55.1, 573.0], [55.2, 573.0], [55.3, 573.0], [55.4, 574.0], [55.5, 574.0], [55.6, 574.0], [55.7, 585.0], [55.8, 585.0], [55.9, 585.0], [56.0, 585.0], [56.1, 587.0], [56.2, 587.0], [56.3, 587.0], [56.4, 588.0], [56.5, 588.0], [56.6, 588.0], [56.7, 591.0], [56.8, 591.0], [56.9, 591.0], [57.0, 591.0], [57.1, 595.0], [57.2, 595.0], [57.3, 595.0], [57.4, 595.0], [57.5, 595.0], [57.6, 595.0], [57.7, 598.0], [57.8, 598.0], [57.9, 598.0], [58.0, 598.0], [58.1, 600.0], [58.2, 600.0], [58.3, 600.0], [58.4, 601.0], [58.5, 601.0], [58.6, 601.0], [58.7, 603.0], [58.8, 603.0], [58.9, 603.0], [59.0, 603.0], [59.1, 604.0], [59.2, 604.0], [59.3, 604.0], [59.4, 604.0], [59.5, 604.0], [59.6, 604.0], [59.7, 607.0], [59.8, 607.0], [59.9, 607.0], [60.0, 607.0], [60.1, 609.0], [60.2, 609.0], [60.3, 609.0], [60.4, 609.0], [60.5, 609.0], [60.6, 609.0], [60.7, 611.0], [60.8, 611.0], [60.9, 611.0], [61.0, 611.0], [61.1, 622.0], [61.2, 622.0], [61.3, 622.0], [61.4, 622.0], [61.5, 622.0], [61.6, 622.0], [61.7, 625.0], [61.8, 625.0], [61.9, 625.0], [62.0, 625.0], [62.1, 630.0], [62.2, 630.0], [62.3, 630.0], [62.4, 635.0], [62.5, 635.0], [62.6, 635.0], [62.7, 641.0], [62.8, 641.0], [62.9, 641.0], [63.0, 641.0], [63.1, 644.0], [63.2, 644.0], [63.3, 644.0], [63.4, 650.0], [63.5, 650.0], [63.6, 650.0], [63.7, 652.0], [63.8, 652.0], [63.9, 652.0], [64.0, 652.0], [64.1, 654.0], [64.2, 654.0], [64.3, 654.0], [64.4, 655.0], [64.5, 655.0], [64.6, 655.0], [64.7, 676.0], [64.8, 676.0], [64.9, 676.0], [65.0, 676.0], [65.1, 677.0], [65.2, 677.0], [65.3, 677.0], [65.4, 677.0], [65.5, 677.0], [65.6, 677.0], [65.7, 678.0], [65.8, 678.0], [65.9, 678.0], [66.0, 678.0], [66.1, 680.0], [66.2, 680.0], [66.3, 680.0], [66.4, 695.0], [66.5, 695.0], [66.6, 695.0], [66.7, 711.0], [66.8, 711.0], [66.9, 711.0], [67.0, 711.0], [67.1, 717.0], [67.2, 717.0], [67.3, 717.0], [67.4, 718.0], [67.5, 718.0], [67.6, 718.0], [67.7, 718.0], [67.8, 718.0], [67.9, 718.0], [68.0, 718.0], [68.1, 720.0], [68.2, 720.0], [68.3, 720.0], [68.4, 726.0], [68.5, 726.0], [68.6, 726.0], [68.7, 727.0], [68.8, 727.0], [68.9, 727.0], [69.0, 727.0], [69.1, 727.0], [69.2, 727.0], [69.3, 727.0], [69.4, 729.0], [69.5, 729.0], [69.6, 729.0], [69.7, 732.0], [69.8, 732.0], [69.9, 732.0], [70.0, 732.0], [70.1, 735.0], [70.2, 735.0], [70.3, 735.0], [70.4, 737.0], [70.5, 737.0], [70.6, 737.0], [70.7, 737.0], [70.8, 737.0], [70.9, 737.0], [71.0, 737.0], [71.1, 739.0], [71.2, 739.0], [71.3, 739.0], [71.4, 740.0], [71.5, 740.0], [71.6, 740.0], [71.7, 744.0], [71.8, 744.0], [71.9, 744.0], [72.0, 744.0], [72.1, 744.0], [72.2, 744.0], [72.3, 744.0], [72.4, 750.0], [72.5, 750.0], [72.6, 750.0], [72.7, 753.0], [72.8, 753.0], [72.9, 753.0], [73.0, 753.0], [73.1, 753.0], [73.2, 753.0], [73.3, 753.0], [73.4, 761.0], [73.5, 761.0], [73.6, 761.0], [73.7, 762.0], [73.8, 762.0], [73.9, 762.0], [74.0, 762.0], [74.1, 763.0], [74.2, 763.0], [74.3, 763.0], [74.4, 765.0], [74.5, 765.0], [74.6, 765.0], [74.7, 769.0], [74.8, 769.0], [74.9, 769.0], [75.0, 769.0], [75.1, 769.0], [75.2, 769.0], [75.3, 769.0], [75.4, 770.0], [75.5, 770.0], [75.6, 770.0], [75.7, 776.0], [75.8, 776.0], [75.9, 776.0], [76.0, 776.0], [76.1, 776.0], [76.2, 776.0], [76.3, 776.0], [76.4, 776.0], [76.5, 776.0], [76.6, 776.0], [76.7, 781.0], [76.8, 781.0], [76.9, 781.0], [77.0, 787.0], [77.1, 787.0], [77.2, 787.0], [77.3, 787.0], [77.4, 792.0], [77.5, 792.0], [77.6, 792.0], [77.7, 796.0], [77.8, 796.0], [77.9, 796.0], [78.0, 797.0], [78.1, 797.0], [78.2, 797.0], [78.3, 797.0], [78.4, 820.0], [78.5, 820.0], [78.6, 820.0], [78.7, 821.0], [78.8, 821.0], [78.9, 821.0], [79.0, 825.0], [79.1, 825.0], [79.2, 825.0], [79.3, 825.0], [79.4, 828.0], [79.5, 828.0], [79.6, 828.0], [79.7, 850.0], [79.8, 850.0], [79.9, 850.0], [80.0, 851.0], [80.1, 851.0], [80.2, 851.0], [80.3, 851.0], [80.4, 870.0], [80.5, 870.0], [80.6, 870.0], [80.7, 914.0], [80.8, 914.0], [80.9, 914.0], [81.0, 1003.0], [81.1, 1003.0], [81.2, 1003.0], [81.3, 1003.0], [81.4, 1083.0], [81.5, 1083.0], [81.6, 1083.0], [81.7, 1105.0], [81.8, 1105.0], [81.9, 1105.0], [82.0, 1136.0], [82.1, 1136.0], [82.2, 1136.0], [82.3, 1136.0], [82.4, 1194.0], [82.5, 1194.0], [82.6, 1194.0], [82.7, 1205.0], [82.8, 1205.0], [82.9, 1205.0], [83.0, 1249.0], [83.1, 1249.0], [83.2, 1249.0], [83.3, 1249.0], [83.4, 1256.0], [83.5, 1256.0], [83.6, 1256.0], [83.7, 1257.0], [83.8, 1257.0], [83.9, 1257.0], [84.0, 1275.0], [84.1, 1275.0], [84.2, 1275.0], [84.3, 1275.0], [84.4, 1277.0], [84.5, 1277.0], [84.6, 1277.0], [84.7, 1318.0], [84.8, 1318.0], [84.9, 1318.0], [85.0, 1319.0], [85.1, 1319.0], [85.2, 1319.0], [85.3, 1319.0], [85.4, 1333.0], [85.5, 1333.0], [85.6, 1333.0], [85.7, 1340.0], [85.8, 1340.0], [85.9, 1340.0], [86.0, 1355.0], [86.1, 1355.0], [86.2, 1355.0], [86.3, 1355.0], [86.4, 1358.0], [86.5, 1358.0], [86.6, 1358.0], [86.7, 1370.0], [86.8, 1370.0], [86.9, 1370.0], [87.0, 1384.0], [87.1, 1384.0], [87.2, 1384.0], [87.3, 1384.0], [87.4, 1444.0], [87.5, 1444.0], [87.6, 1444.0], [87.7, 1456.0], [87.8, 1456.0], [87.9, 1456.0], [88.0, 1462.0], [88.1, 1462.0], [88.2, 1462.0], [88.3, 1462.0], [88.4, 1493.0], [88.5, 1493.0], [88.6, 1493.0], [88.7, 1554.0], [88.8, 1554.0], [88.9, 1554.0], [89.0, 1571.0], [89.1, 1571.0], [89.2, 1571.0], [89.3, 1571.0], [89.4, 1625.0], [89.5, 1625.0], [89.6, 1625.0], [89.7, 1652.0], [89.8, 1652.0], [89.9, 1652.0], [90.0, 1709.0], [90.1, 1709.0], [90.2, 1709.0], [90.3, 1709.0], [90.4, 1785.0], [90.5, 1785.0], [90.6, 1785.0], [90.7, 1794.0], [90.8, 1794.0], [90.9, 1794.0], [91.0, 1912.0], [91.1, 1912.0], [91.2, 1912.0], [91.3, 1912.0], [91.4, 1981.0], [91.5, 1981.0], [91.6, 1981.0], [91.7, 1992.0], [91.8, 1992.0], [91.9, 1992.0], [92.0, 2040.0], [92.1, 2040.0], [92.2, 2040.0], [92.3, 2040.0], [92.4, 2045.0], [92.5, 2045.0], [92.6, 2045.0], [92.7, 2138.0], [92.8, 2138.0], [92.9, 2138.0], [93.0, 2441.0], [93.1, 2441.0], [93.2, 2441.0], [93.3, 2441.0], [93.4, 2444.0], [93.5, 2444.0], [93.6, 2444.0], [93.7, 2464.0], [93.8, 2464.0], [93.9, 2464.0], [94.0, 2502.0], [94.1, 2502.0], [94.2, 2502.0], [94.3, 2502.0], [94.4, 2531.0], [94.5, 2531.0], [94.6, 2531.0], [94.7, 2547.0], [94.8, 2547.0], [94.9, 2547.0], [95.0, 2658.0], [95.1, 2658.0], [95.2, 2658.0], [95.3, 2658.0], [95.4, 2674.0], [95.5, 2674.0], [95.6, 2674.0], [95.7, 2674.0], [95.8, 2674.0], [95.9, 2674.0], [96.0, 2841.0], [96.1, 2841.0], [96.2, 2841.0], [96.3, 2841.0], [96.4, 2927.0], [96.5, 2927.0], [96.6, 2927.0], [96.7, 3131.0], [96.8, 3131.0], [96.9, 3131.0], [97.0, 3833.0], [97.1, 3833.0], [97.2, 3833.0], [97.3, 3833.0], [97.4, 4056.0], [97.5, 4056.0], [97.6, 4056.0], [97.7, 4343.0], [97.8, 4343.0], [97.9, 4343.0], [98.0, 4473.0], [98.1, 4473.0], [98.2, 4473.0], [98.3, 4473.0], [98.4, 5011.0], [98.5, 5011.0], [98.6, 5011.0], [98.7, 5510.0], [98.8, 5510.0], [98.9, 5510.0], [99.0, 5555.0], [99.1, 5555.0], [99.2, 5555.0], [99.3, 5555.0], [99.4, 8298.0], [99.5, 8298.0], [99.6, 8298.0], [99.7, 15652.0], [99.8, 15652.0], [99.9, 15652.0]], "isOverall": false, "label": "POSTRequest", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 50.0, "series": [{"data": [[163300.0, 6.0], [171300.0, 1.0], [163400.0, 3.0], [171400.0, 6.0], [33300.0, 1.0], [163500.0, 7.0], [159500.0, 3.0], [171500.0, 10.0], [159600.0, 2.0], [163600.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [159700.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [5100.0, 1.0], [4900.0, 2.0], [5300.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [5700.0, 1.0], [6000.0, 2.0], [6400.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [7000.0, 2.0], [7100.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7700.0, 2.0], [7800.0, 2.0], [8000.0, 2.0], [8500.0, 4.0], [8600.0, 2.0], [8200.0, 1.0], [8300.0, 2.0], [9100.0, 3.0], [9200.0, 2.0], [9000.0, 3.0], [8800.0, 2.0], [8900.0, 1.0], [9300.0, 3.0], [9400.0, 4.0], [9700.0, 7.0], [9600.0, 1.0], [9500.0, 1.0], [9800.0, 3.0], [10000.0, 1.0], [10100.0, 1.0], [10200.0, 1.0], [9900.0, 1.0], [10700.0, 3.0], [10300.0, 1.0], [10500.0, 1.0], [11100.0, 3.0], [11200.0, 4.0], [11500.0, 2.0], [11400.0, 3.0], [11600.0, 2.0], [11700.0, 3.0], [12200.0, 4.0], [11900.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [12400.0, 4.0], [12700.0, 1.0], [12500.0, 3.0], [13300.0, 1.0], [13200.0, 1.0], [13000.0, 3.0], [12900.0, 2.0], [13100.0, 1.0], [12800.0, 1.0], [13600.0, 2.0], [13500.0, 4.0], [14000.0, 2.0], [14200.0, 3.0], [13900.0, 1.0], [14100.0, 1.0], [14600.0, 3.0], [14800.0, 3.0], [14400.0, 4.0], [14700.0, 2.0], [14500.0, 2.0], [15200.0, 4.0], [15000.0, 3.0], [15300.0, 1.0], [15100.0, 3.0], [15500.0, 1.0], [15400.0, 4.0], [15800.0, 2.0], [15600.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16000.0, 1.0], [16100.0, 1.0], [16300.0, 1.0], [16700.0, 2.0], [16900.0, 4.0], [17400.0, 3.0], [17200.0, 2.0], [17000.0, 3.0], [16400.0, 1.0], [16600.0, 1.0], [17300.0, 2.0], [17900.0, 1.0], [18200.0, 3.0], [17800.0, 2.0], [18300.0, 2.0], [17500.0, 2.0], [17600.0, 1.0], [18400.0, 3.0], [17700.0, 1.0], [18100.0, 1.0], [18500.0, 1.0], [18700.0, 2.0], [19200.0, 1.0], [18800.0, 2.0], [18900.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [19900.0, 1.0], [19500.0, 2.0], [20100.0, 2.0], [20300.0, 1.0], [21400.0, 1.0], [20600.0, 1.0], [21200.0, 2.0], [20900.0, 2.0], [20500.0, 1.0], [21300.0, 1.0], [20800.0, 1.0], [21100.0, 1.0], [22000.0, 1.0], [22100.0, 1.0], [21700.0, 2.0], [22300.0, 1.0], [21600.0, 1.0], [22400.0, 1.0], [21800.0, 2.0], [22600.0, 1.0], [22800.0, 1.0], [22900.0, 1.0], [23100.0, 1.0], [23000.0, 1.0], [22700.0, 1.0], [23500.0, 1.0], [23600.0, 1.0], [23800.0, 1.0], [24800.0, 2.0], [26300.0, 1.0], [27000.0, 1.0], [26900.0, 1.0], [28300.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [31000.0, 1.0], [36400.0, 1.0], [157500.0, 1.0], [171900.0, 1.0]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[8200.0, 1.0], [600.0, 26.0], [700.0, 35.0], [800.0, 7.0], [900.0, 1.0], [15600.0, 1.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 6.0], [1300.0, 8.0], [1400.0, 4.0], [1500.0, 2.0], [1600.0, 2.0], [1700.0, 3.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 1.0], [2400.0, 3.0], [2500.0, 3.0], [2600.0, 3.0], [2800.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [200.0, 39.0], [3800.0, 1.0], [4000.0, 1.0], [4300.0, 1.0], [4400.0, 1.0], [300.0, 38.0], [5000.0, 1.0], [5500.0, 2.0], [400.0, 50.0], [500.0, 47.0]], "isOverall": false, "label": "POSTRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 171900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 42.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 292.0, "series": [{"data": [[0.0, 127.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 139.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 292.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 42.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.767441860465114, "minX": 1.73267916E12, "maxY": 178.18798449612373, "series": [{"data": [[1.73267928E12, 34.12195121951219], [1.73267934E12, 15.767441860465114], [1.73267916E12, 178.18798449612373]], "isOverall": false, "label": "DummyJSON", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73267934E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 238.0, "minX": 1.0, "maxY": 171972.0, "series": [{"data": [[3.0, 171313.0], [22.0, 171517.00000000003], [23.0, 163463.2], [35.0, 163544.75], [34.0, 163396.6], [37.0, 159622.5], [38.0, 160619.0], [41.0, 161523.66666666666], [43.0, 36441.0], [42.0, 159684.0], [45.0, 32238.0], [47.0, 23862.0], [46.0, 29579.0], [51.0, 27464.333333333332], [52.0, 26948.0], [54.0, 26672.0], [56.0, 21619.0], [66.0, 21378.5], [64.0, 21941.5], [71.0, 18152.0], [70.0, 19944.0], [76.0, 20965.666666666668], [83.0, 17309.0], [91.0, 18276.0], [90.0, 20301.25], [95.0, 19632.666666666668], [93.0, 17387.0], [97.0, 20316.0], [96.0, 18973.8], [103.0, 21211.8], [110.0, 14734.0], [115.0, 18201.75], [117.0, 18987.0], [122.0, 15437.0], [121.0, 16944.0], [120.0, 18969.857142857145], [126.0, 17586.124999999996], [128.0, 14239.0], [142.0, 14635.666666666666], [137.0, 13656.0], [151.0, 15002.5], [149.0, 17435.0], [159.0, 11324.0], [153.0, 11442.0], [164.0, 15286.5], [163.0, 13293.5], [162.0, 15666.0], [161.0, 14619.5], [181.0, 14597.0], [179.0, 15517.5], [178.0, 14259.0], [189.0, 17815.0], [188.0, 12915.555555555557], [185.0, 13774.2], [184.0, 12217.5], [195.0, 17941.0], [193.0, 16557.0], [204.0, 16273.0], [203.0, 13862.0], [202.0, 16677.5], [201.0, 13686.0], [200.0, 12802.75], [215.0, 7598.0], [214.0, 15902.0], [210.0, 11180.333333333334], [208.0, 12203.0], [223.0, 15242.0], [220.0, 14190.75], [218.0, 11029.5], [231.0, 15872.0], [227.0, 15037.0], [225.0, 11255.0], [237.0, 8526.0], [235.0, 15467.0], [232.0, 10753.42857142857], [246.0, 9298.5], [245.0, 12008.0], [255.0, 15539.0], [249.0, 11488.75], [248.0, 12673.166666666668], [270.0, 6038.5], [271.0, 10388.166666666666], [268.0, 8326.0], [266.0, 9509.0], [259.0, 9458.0], [287.0, 6425.333333333333], [284.0, 4999.0], [283.0, 6436.0], [282.0, 8345.285714285714], [279.0, 13369.0], [278.0, 11156.4], [277.0, 10530.5], [276.0, 6272.5], [275.0, 11131.0], [272.0, 8718.0], [299.0, 9356.0], [298.0, 6009.636363636363], [293.0, 9406.0], [292.0, 5881.0], [289.0, 9783.5], [1.0, 171972.0]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[162.64333333333332, 35707.92333333333]], "isOverall": false, "label": "GETRequest-Aggregated", "isController": false}, {"data": [[2.0, 763.0], [3.0, 4056.0], [4.0, 2841.0], [5.0, 3131.0], [6.0, 2658.0], [7.0, 2441.0], [8.0, 2502.0], [9.0, 2138.0], [10.0, 2531.0], [11.0, 2444.0], [12.0, 2045.0], [13.0, 1571.0], [14.0, 1981.0], [15.0, 1912.0], [16.0, 1456.0], [17.0, 1444.0], [18.0, 1493.0], [19.0, 2464.0], [20.0, 2927.0], [21.0, 2674.0], [22.0, 2547.0], [23.0, 1992.0], [24.0, 787.0], [25.0, 792.0], [26.0, 796.0], [28.0, 812.5], [30.0, 761.0], [31.0, 737.0], [33.0, 820.0], [32.0, 735.0], [35.0, 732.0], [34.0, 769.0], [37.0, 739.0], [36.0, 744.0], [39.0, 765.0], [38.0, 726.0], [41.0, 727.0], [40.0, 718.0], [43.0, 261.0], [42.0, 1462.0], [45.0, 253.0], [44.0, 245.0], [47.0, 247.0], [46.0, 251.0], [49.0, 1345.5], [51.0, 15652.0], [50.0, 243.0], [53.0, 254.0], [52.0, 248.0], [55.0, 298.0], [54.0, 247.0], [57.0, 250.0], [56.0, 250.0], [59.0, 246.0], [61.0, 263.0], [60.0, 261.0], [63.0, 244.0], [62.0, 259.0], [66.0, 238.0], [65.0, 244.0], [64.0, 241.0], [71.0, 5011.0], [70.0, 341.0], [69.0, 297.3333333333333], [74.0, 1355.0], [73.0, 1319.0], [72.0, 1318.0], [77.0, 569.0], [76.0, 1377.0], [83.0, 677.0], [82.0, 609.4], [87.0, 718.0], [85.0, 695.0], [91.0, 321.0], [90.0, 763.6], [95.0, 358.0], [94.0, 338.0], [93.0, 292.0], [92.0, 315.0], [98.0, 5510.0], [97.0, 5555.0], [96.0, 4343.0], [103.0, 601.0], [102.0, 604.0], [101.0, 603.0], [100.0, 1503.5], [107.0, 503.0], [106.0, 611.0], [105.0, 598.0], [104.0, 543.0], [111.0, 424.0], [110.0, 514.0], [109.0, 516.0], [115.0, 374.0], [114.0, 351.0], [113.0, 344.0], [112.0, 365.0], [119.0, 341.5], [117.0, 309.0], [116.0, 257.0], [123.0, 253.0], [122.0, 308.0], [121.0, 286.0], [120.0, 348.0], [127.0, 350.0], [126.0, 298.0], [125.0, 288.0], [124.0, 267.0], [132.0, 1709.0], [131.0, 1256.0], [130.0, 1249.0], [129.0, 389.0], [128.0, 342.0], [143.0, 519.0], [142.0, 8298.0], [141.0, 585.0], [140.0, 870.0], [139.0, 773.0], [137.0, 1277.0], [136.0, 1323.25], [151.0, 1266.0], [149.0, 551.0], [148.0, 553.0], [147.0, 609.0], [146.0, 604.0], [145.0, 518.0], [144.0, 517.0], [159.0, 496.0], [158.0, 496.0], [157.0, 504.0], [156.0, 486.0], [153.0, 513.0], [152.0, 519.0], [165.0, 430.0], [164.0, 438.0], [163.0, 483.0], [162.0, 513.0], [161.0, 466.0], [160.0, 467.0], [173.0, 720.0], [172.0, 727.0], [171.0, 627.5], [169.0, 568.0], [168.0, 468.6666666666667], [181.0, 607.0], [180.0, 591.0], [179.0, 750.0], [178.0, 761.5], [176.0, 739.6666666666666], [191.0, 508.0], [190.0, 479.0], [189.0, 428.0], [188.0, 587.0], [187.0, 516.0], [186.0, 485.0], [185.0, 622.0], [184.0, 632.0], [198.0, 456.0], [197.0, 423.0], [196.0, 388.0], [195.0, 451.0], [194.0, 451.0], [193.0, 526.0], [207.0, 435.0], [206.0, 434.0], [205.0, 442.0], [204.0, 449.0], [203.0, 450.0], [202.0, 439.0], [201.0, 392.0], [200.0, 727.0], [215.0, 423.0], [214.0, 435.0], [213.0, 421.0], [212.0, 423.0], [210.0, 914.0], [209.0, 411.0], [208.0, 445.0], [223.0, 600.0], [222.0, 591.5], [220.0, 554.5], [218.0, 493.0], [217.0, 497.0], [216.0, 481.0], [231.0, 677.0], [229.0, 662.0], [227.0, 654.0], [226.0, 677.0], [225.0, 622.0], [224.0, 558.0], [239.0, 273.0], [238.0, 274.0], [237.0, 282.0], [236.0, 300.0], [235.0, 312.0], [234.0, 309.0], [232.0, 641.0], [247.0, 1105.0], [246.0, 468.0], [245.0, 307.0], [243.0, 297.0], [240.0, 274.0], [255.0, 324.0], [254.0, 288.5], [252.0, 289.0], [251.0, 3833.0], [250.0, 288.0], [249.0, 439.0], [248.0, 444.0], [269.0, 529.0], [271.0, 513.0], [268.0, 511.0], [267.0, 513.0], [266.0, 525.0], [265.0, 526.5], [263.0, 521.3333333333334], [260.0, 515.0], [259.0, 464.0], [258.0, 435.0], [257.0, 369.0], [256.0, 335.0], [286.0, 396.0], [287.0, 549.0], [285.0, 369.0], [284.0, 373.0], [283.0, 301.0], [282.0, 438.0], [281.0, 766.5], [279.0, 414.0], [273.0, 401.0], [272.0, 374.0], [275.0, 382.0], [274.0, 407.0], [278.0, 1136.0], [277.0, 431.0], [276.0, 408.0], [300.0, 2040.0], [299.0, 506.0], [298.0, 776.0], [296.0, 850.0], [295.0, 816.0], [293.0, 4473.0], [292.0, 1625.0], [291.0, 1652.0], [290.0, 504.0], [289.0, 1789.5], [1.0, 740.0]], "isOverall": false, "label": "POSTRequest", "isController": false}, {"data": [[150.76333333333332, 875.6799999999996]], "isOverall": false, "label": "POSTRequest-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 61.43333333333333, "minX": 1.73267916E12, "maxY": 200108.6, "series": [{"data": [[1.73267928E12, 1690.0166666666667], [1.73267934E12, 1644.45], [1.73267916E12, 200108.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73267928E12, 61.43333333333333], [1.73267934E12, 74.36666666666666], [1.73267916E12, 1427.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73267934E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 762.6240310077516, "minX": 1.73267916E12, "maxY": 170734.5, "series": [{"data": [[1.73267928E12, 162150.95454545456], [1.73267934E12, 170734.5], [1.73267916E12, 14458.782945736433]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[1.73267928E12, 799.7894736842106], [1.73267934E12, 2206.5652173913045], [1.73267916E12, 762.6240310077516]], "isOverall": false, "label": "POSTRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73267934E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73267916E12, "maxY": 5950.577519379847, "series": [{"data": [[1.73267928E12, 0.0], [1.73267934E12, 0.0], [1.73267916E12, 5950.577519379847]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[1.73267928E12, 799.7894736842106], [1.73267934E12, 2206.5652173913045], [1.73267916E12, 762.5426356589146]], "isOverall": false, "label": "POSTRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73267934E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73267916E12, "maxY": 170734.39999999997, "series": [{"data": [[1.73267928E12, 162150.7727272727], [1.73267934E12, 170734.39999999997], [1.73267916E12, 4139.833333333334]], "isOverall": false, "label": "GETRequest", "isController": false}, {"data": [[1.73267928E12, 540.4736842105264], [1.73267934E12, 1597.5652173913043], [1.73267916E12, 0.0]], "isOverall": false, "label": "POSTRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73267934E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 238.0, "minX": 1.73267916E12, "maxY": 36441.0, "series": [{"data": [[1.73267928E12, 1462.0], [1.73267934E12, 4056.0], [1.73267916E12, 36441.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73267928E12, 718.0], [1.73267934E12, 740.0], [1.73267916E12, 238.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73267928E12, 828.0], [1.73267934E12, 3049.4], [1.73267916E12, 18730.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73267928E12, 1462.0], [1.73267934E12, 4056.0], [1.73267916E12, 29013.31999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73267928E12, 765.0], [1.73267934E12, 2441.0], [1.73267916E12, 4732.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73267928E12, 1462.0], [1.73267934E12, 3870.9999999999973], [1.73267916E12, 21813.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73267934E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 276.0, "minX": 1.0, "maxY": 171514.0, "series": [{"data": [[2.0, 6038.5], [35.0, 8909.0], [39.0, 5555.0], [10.0, 1238.0], [41.0, 1257.0], [45.0, 13511.0], [12.0, 2462.0], [48.0, 676.5], [3.0, 2841.0], [13.0, 5011.0], [54.0, 7189.5], [56.0, 7189.5], [14.0, 735.5], [60.0, 11402.5], [15.0, 1256.0], [4.0, 8505.0], [1.0, 1112.5], [17.0, 4991.0], [19.0, 717.0], [21.0, 276.0], [6.0, 14916.0], [7.0, 1981.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 163373.0], [2.0, 163405.0], [8.0, 171508.5], [3.0, 163546.0], [12.0, 171514.0], [7.0, 159640.0], [14.0, 163397.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4094.5, "series": [{"data": [[2.0, 3222.0], [35.0, 3213.0], [39.0, 3824.0], [10.0, 1238.0], [41.0, 1256.0], [45.0, 3835.0], [12.0, 2012.0], [48.0, 676.5], [3.0, 2841.0], [13.0, 3346.0], [54.0, 3142.5], [56.0, 3333.0], [14.0, 735.5], [60.0, 4094.5], [15.0, 1255.0], [4.0, 2150.5], [1.0, 1112.5], [17.0, 2344.0], [19.0, 717.0], [21.0, 276.0], [6.0, 2093.0], [7.0, 1981.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 0.0], [8.0, 0.0], [3.0, 0.0], [12.0, 0.0], [7.0, 0.0], [14.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.73267916E12, "maxY": 9.3, "series": [{"data": [[1.73267928E12, 0.36666666666666664], [1.73267934E12, 0.3333333333333333], [1.73267916E12, 9.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73267934E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.73267916E12, "maxY": 4.3, "series": [{"data": [[1.73267916E12, 4.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73267928E12, 0.31666666666666665], [1.73267934E12, 0.38333333333333336], [1.73267916E12, 4.3]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.73267928E12, 0.36666666666666664], [1.73267934E12, 0.3333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73267934E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.73267916E12, "maxY": 4.3, "series": [{"data": [[1.73267916E12, 4.3]], "isOverall": false, "label": "GETRequest-success", "isController": false}, {"data": [[1.73267928E12, 0.36666666666666664], [1.73267934E12, 0.3333333333333333]], "isOverall": false, "label": "GETRequest-failure", "isController": false}, {"data": [[1.73267928E12, 0.31666666666666665], [1.73267934E12, 0.38333333333333336], [1.73267916E12, 4.3]], "isOverall": false, "label": "POSTRequest-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73267934E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.73267916E12, "maxY": 8.6, "series": [{"data": [[1.73267928E12, 0.31666666666666665], [1.73267934E12, 0.38333333333333336], [1.73267916E12, 8.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73267928E12, 0.36666666666666664], [1.73267934E12, 0.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73267934E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

